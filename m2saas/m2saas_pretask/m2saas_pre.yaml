---
- name: Setup and configure the system
  hosts: all
  become: yes
  vars:
    devops_password: "DevOps@2025#"  # Replace with the desired password

  tasks:

    # Update apt cache and upgrade the system
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600  # Keeps the cache for 1 hour

    - name: Upgrade all apt packages
      apt:
        upgrade: yes
        autoclean: yes
        autoremove: yes

    # Create 'devops' user with a password and add to sudo group
    - name: Create devops user with password
      user:
        name: devops
        comment: 'DevOps User'
        shell: /bin/bash
        password: "{{ 'DevOps@2025#' | password_hash('sha512') }}"  # Password hashed with SHA-512
        state: present
        create_home: yes

    - name: Add devops user to sudo group
      user:
        name: devops
        groups: sudo  # Specify groups explicitly
        append: yes   # Append the user to the sudo group
        state: present

    - name: Allow devops user to execute root commands without password
      lineinfile:
        path: /etc/sudoers
        line: 'devops ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'  # Ensure sudoers file syntax is correct
        state: present

    # Install required tools: traceroute, tracepath, curl, wget, netstat, btop, ncdu, speedtest, fio
    - name: Install necessary tools
      apt:
        name:
          - traceroute
          - curl
          - wget
          - net-tools   # for netstat
          - btop
          - ncdu
          - speedtest-cli
          - fio
        state: present
        update_cache: yes

    # Install Telegraf using provided commands
#    - name: Add InfluxData GPG key and repository
#      shell: |
#        curl --silent --location -O https://repos.influxdata.com/influxdata-archive.key
#       echo "943666881a1b8d9b849b74caebf02d3465d6beb716510d86a39f6c8e8dac7515  influxdata-archive.key" | sha256sum -c -
#       cat influxdata-archive.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/influxdata-archive.gpg > /dev/null
#       echo 'deb [signed-by=/etc/apt/trusted.gpg.d/influxdata-archive.gpg] https://repos.influxdata.com/debian stable main' | sudo tee /etc/apt/sources.list.d/influxdata.list
#      become: yes

#    - name: Update apt cache after adding InfluxData repository
#     apt:
#       update_cache: yes

#    - name: Install Telegraf
#     apt:
#       name: telegraf
#        state: present
#        update_cache: yes

    # Configure Telegraf before starting the service
#    - name: Ensure telegraf configuration is properly set
#      lineinfile:
#       path: /etc/telegraf/telegraf.conf
#       regexp: '^# (.*)'
#        line: '\1'
#       state: present
#       create: yes
#        backup: yes

#    - name: Configure Telegraf with custom settings
#     template:
#       src: telegraf.conf.j2
#        dest: /etc/telegraf/telegraf.conf
#       owner: root
#       group: root
#       mode: '0644'
#      notify:
#       - Restart telegraf

    # Start and enable Telegraf service after configuration
#    - name: Start and enable Telegraf service
#      systemd:
#       name: telegraf
#       state: started
#        enabled: yes

#    # Install Logstash using provided commands
#    - name: Install Logstash repository and GPG key
#      shell: |
#        wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elastic-keyring.gpg
#        sudo apt-get install apt-transport-https
#       echo "deb [signed-by=/usr/share/keyrings/elastic-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-8.x.list
#        sudo apt-get update
#      become: yes

#   - name: Install Logstash
#     apt:
#       name: logstash
#       state: present
#       update_cache: yes

    # Start and enable Logstash service
#    - name: Start and enable Logstash service
#     systemd:
#       name: logstash
#       state: started
#       enabled: yes

    # Apply kernel tuning parameters
    - name: Apply kernel tuning parameters
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { key: 'fs.file-max', value: '4194303' }
        - { key: 'vm.swappiness', value: '1' }
        - { key: 'vm.vfs_cache_pressure', value: '10' }
        - { key: 'vm.min_free_kbytes', value: '1000000' }
        - { key: 'net.core.rmem_max', value: '268435456' }
        - { key: 'net.core.wmem_max', value: '268435456' }
        - { key: 'net.core.rmem_default', value: '67108864' }
        - { key: 'net.core.wmem_default', value: '67108864' }
        - { key: 'net.core.netdev_budget', value: '1200' }
        - { key: 'net.core.optmem_max', value: '134217728' }
        - { key: 'net.core.somaxconn', value: '65535' }
        - { key: 'net.core.netdev_max_backlog', value: '250000' }
        - { key: 'net.ipv4.tcp_rmem', value: '67108864 134217728 268435456' }
        - { key: 'net.ipv4.tcp_wmem', value: '67108864 134217728 268435456' }
        - { key: 'net.ipv4.tcp_low_latency', value: '1' }
        - { key: 'net.ipv4.tcp_adv_win_scale', value: '1' }
        - { key: 'net.ipv4.tcp_max_syn_backlog', value: '30000' }
        - { key: 'net.ipv4.tcp_max_tw_buckets', value: '2000000' }
        - { key: 'net.ipv4.tcp_tw_reuse', value: '1' }
        - { key: 'net.ipv4.tcp_fin_timeout', value: '5' }
        - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }
        - { key: 'net.ipv4.conf.all.accept_redirects', value: '0' }
        - { key: 'net.ipv4.conf.all.accept_source_route', value: '0' }
        - { key: 'net.ipv4.tcp_mtu_probing', value: '1' }
        - { key: 'vm.overcommit_memory', value: '1' }

#  handlers:
#   - name: Restart telegraf
#      systemd:
#        name: telegraf
#        state: restarted

    # Reboot the server at the end
    - name: Restart the server
      shell: sleep 5 && shutdown -r now
      async: 1
      poll: 0
